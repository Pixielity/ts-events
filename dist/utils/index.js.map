{"version":3,"sources":["../../src/constants/metadata.constants.ts","../../src/utils/reflection.util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAGO,IAAM,mBAAsB,GAAA,gBAAA;;;ACQ5B,SAAS,aAAa,KAAkC,EAAA;AAE7D,EACE,IAAA,OAAO,UAAU,QACjB,IAAA,KAAA,KAAU,QACV,OAAQ,KAAA,CAAiB,iBAAiB,UAC1C,EAAA;AACA,IAAA,OAAQ,MAAiB,YAAc,EAAA;AAAA;AAIzC,EAAA,MAAM,MAAS,GAAA,OAAO,KAAU,KAAA,QAAA,GAAW,MAAM,WAAc,GAAA,KAAA;AAG/D,EAAA,MAAM,QAAW,GAAA,OAAA,CAAQ,WAAY,CAAA,mBAAA,EAAqB,MAAM,CAAA;AAChE,EAAI,IAAA,QAAA,IAAY,SAAS,IAAM,EAAA;AAC7B,IAAA,OAAO,QAAS,CAAA,IAAA;AAAA;AAIlB,EAAA,OAAO,MAAO,CAAA,IAAA;AAChB;AAGA,IAAM,gBAA4B,EAAC;AAQ5B,SAAS,mBAAmB,UAA4B,EAAA;AAC7D,EAAA,IAAI,CAAC,aAAA,CAAc,QAAS,CAAA,UAAU,CAAG,EAAA;AACvC,IAAA,aAAA,CAAc,KAAK,UAAU,CAAA;AAAA;AAEjC;AAOO,SAAS,eAA8B,GAAA;AAC5C,EAAO,OAAA,CAAC,GAAG,aAAa,CAAA;AAC1B;AAQO,SAAS,QAAQ,MAA2B,EAAA;AACjD,EAAO,OAAA,OAAA,CAAQ,WAAY,CAAA,mBAAA,EAAqB,MAAM,CAAA;AACxD","file":"index.js","sourcesContent":["/**\n * Metadata key for event information.\n */\nexport const EVENTS_METADATA_KEY = 'tsevents:event'\n\n/**\n * Metadata key for listener information.\n */\nexport const LISTENERS_METADATA_KEY = 'tsevents:listener'\n\n/**\n * Metadata key for subscriber information.\n */\nexport const SUBSCRIBERS_METADATA_KEY = 'tsevents:subscriber'\n\n/**\n * Metadata key for queueable information.\n */\nexport const QUEUEABLE_METADATA_KEY = 'tsevents:queueable'\n","import 'reflect-metadata'\nimport type { IEvent } from '@pixielity/ts-types'\n\nimport { EVENTS_METADATA_KEY } from '../constants/metadata.constants'\n\n/**\n * Get the event name from an event object or class.\n *\n * @param {Event | Function} event - The event object or class\n * @returns {string} The event name\n */\nexport function getEventName(event: IEvent | Function): string {\n  // If it's an instance with getEventName method, use that\n  if (\n    typeof event === 'object' &&\n    event !== null &&\n    typeof (event as IEvent).getEventName === 'function'\n  ) {\n    return (event as IEvent).getEventName!()\n  }\n\n  // Get the constructor (if it's an instance) or the class itself\n  const target = typeof event === 'object' ? event.constructor : event\n\n  // Check for metadata\n  const metadata = Reflect.getMetadata(EVENTS_METADATA_KEY, target)\n  if (metadata && metadata.name) {\n    return metadata.name\n  }\n\n  // Fallback to class name\n  return target.name\n}\n\n// Registry to track decorated event classes\nconst eventRegistry: Function[] = []\n\n/**\n * Register an event class in the registry.\n * This is called by the Event decorator.\n *\n * @param eventClass - The event class to register\n */\nexport function registerEventClass(eventClass: Function): void {\n  if (!eventRegistry.includes(eventClass)) {\n    eventRegistry.push(eventClass)\n  }\n}\n\n/**\n * Get all registered event classes.\n *\n * @returns {Function[]} Array of event classes\n */\nexport function getEventClasses(): Function[] {\n  return [...eventRegistry]\n}\n\n/**\n * Check if a class is an event.\n *\n * @param {Function} target - The class to check\n * @returns {boolean} True if the class is an event\n */\nexport function isEvent(target: Function): boolean {\n  return Reflect.hasMetadata(EVENTS_METADATA_KEY, target)\n}\n"]}